from sklearn.feature_selection import RFECV
from sklearn import linear_model, preprocessing
from sklearn.linear_model import LogisticRegression
import warnings
import pyarrow.parquet as pq
import pandas as pd
import fastparquet
import numpy as np

"""Suppress a warning and init label encoder"""
warnings.filterwarnings(action="ignore", module="scipy", message="^internal gelsd")
label_encode = preprocessing.LabelEncoder()

"""Load dataset"""
data = pd.read_parquet("dataset.parquet", engine='fastparquet')
design_data = pd.read_parquet("comboattributes.parquet", engine='fastparquet')
category_data = pd.read_parquet("combocategories.parquet", engine='fastparquet')

"""Smaller data frame for testing and building"""
data = data.iloc[ 0:100000 , : ]

"""Check for missing data in all columns and all rows, return dictionary of number of missing
values in a column"""
missing_dict = {}
for ele in data.columns:
    missing_dict.update({ele: 0}) #Declare 0 for all missing elements in every column
    
for row in range(0, len(data)):
    for ele in data.columns:
        if data.at[row, ele] == '':
            missing_dict[ele] += 1;
        
"""Label encode columns with strings"""
for ele in data.columns: 
    for row in range(0, len(data)):
        if type(data.at[row, ele]) == str:
            label_encode.fit(data[ele])
            data[ele] = label_encode.transform(data[ele])
            break

X = data.iloc[:, [8, 16]].values
y = data.iloc[:, 4].values

from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 10,
                                   criterion = 'entropy',
                                   random_state = 0)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
